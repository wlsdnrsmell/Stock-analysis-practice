// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (5980781c).
//
// cputil.tli
//
// Wrapper implementations for Win32 type library c:\daishin\cybos\cputil.dll
// compiler-generated file created 05/29/01 at 10:24:40 - DO NOT EDIT!

#pragma once

//
// interface ICpPcCode3 wrapper method implementations
//

inline short ICpPcCode3::GetCount ( short tno ) {
    short _result;
    HRESULT _hr = raw_GetCount(tno, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICpPcCode3::GetCode ( short tno, short index ) {
    BSTR _result;
    HRESULT _hr = raw_GetCode(tno, index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICpPcCode3::GetName ( short tno, short index ) {
    BSTR _result;
    HRESULT _hr = raw_GetName(tno, index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICpPcCode3::CodeToName ( short tno, _bstr_t code ) {
    BSTR _result;
    HRESULT _hr = raw_CodeToName(tno, code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICpStockCode wrapper method implementations
//

inline _bstr_t ICpStockCode::CodeToName ( _bstr_t code ) {
    BSTR _result;
    HRESULT _hr = raw_CodeToName(code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICpStockCode::FullCodeToName ( _bstr_t code ) {
    BSTR _result;
    HRESULT _hr = raw_FullCodeToName(code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short ICpStockCode::GetCount ( ) {
    short _result;
    HRESULT _hr = raw_GetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ICpStockCode::GetData ( short type, short index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetData(type, index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t ICpStockCode::CodeToFullCode ( _bstr_t code ) {
    BSTR _result;
    HRESULT _hr = raw_CodeToFullCode(code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICpStockCode::FullCodeToCode ( _bstr_t code ) {
    BSTR _result;
    HRESULT _hr = raw_FullCodeToCode(code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICpStockCode::NameToCode ( _bstr_t name ) {
    BSTR _result;
    HRESULT _hr = raw_NameToCode(name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICpFutureCode wrapper method implementations
//

inline short ICpFutureCode::GetCount ( ) {
    short _result;
    HRESULT _hr = raw_GetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ICpFutureCode::GetData ( short type, short index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetData(type, index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t ICpFutureCode::CodeToName ( _bstr_t code ) {
    BSTR _result;
    HRESULT _hr = raw_CodeToName(code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICpOptionCode wrapper method implementations
//

inline short ICpOptionCode::GetCount ( ) {
    short _result;
    HRESULT _hr = raw_GetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ICpOptionCode::GetData ( short type, short index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetData(type, index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t ICpOptionCode::CodeToName ( _bstr_t code ) {
    BSTR _result;
    HRESULT _hr = raw_CodeToName(code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICpCybos wrapper method implementations
//

inline long ICpCybos::GetIsConnect ( ) {
    long _result;
    HRESULT _hr = get_IsConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short ICpCybos::GetServerType ( ) {
    short _result;
    HRESULT _hr = get_ServerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface _ICpCybosEvents wrapper method implementations
//

inline HRESULT _ICpCybosEvents::OnDisconnect ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}
